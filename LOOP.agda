{-# OPTIONS --without-K --exact-split --auto-inline #-}
open import PropTruncations

module LOOP where

-- open subsingleton-truncations-exist pt public

open import MLTT renaming (_+_ to _‚äï_)
open import Arithmetic 
open import List
open import PrimitiveRecursion
open import FinType
open import Decidability

--
-- 1. El lenguaje LOOP
--

-- 1.1. El lenguaje LOOP usa variables del tipo X n, con n : ‚Ñï.
data VAR : ùì§‚ÇÄ Ãá  where
    X : ‚Ñï ‚Üí VAR

-- La variable X‚ÇÄ representar√° la salida del programa.
X‚ÇÄ : VAR
X‚ÇÄ = X 0

-- 1.2. El lenguaje LOOP tiene tres tipos de instrucciones.
data LOOP-Instr : ùì§‚ÇÄ Ãá  where
    CLEAR    : VAR ‚Üí LOOP-Instr
    INC      : VAR ‚Üí LOOP-Instr 
    LOOP_DO_ : VAR ‚Üí List LOOP-Instr ‚Üí LOOP-Instr

-- 1.3. Un LOOP-programa es una secuencia de instrucciones.
-- De esta manera, cualquier sucesi√≥n de instrucciones que sea sint√°cticamente
-- correcta es un LOOP-programa bien formado.
LOOP-program = List LOOP-Instr

END : List LOOP-Instr
END = []

-- Podemos hablar de las instrucciones desde cierto punto del programa.
program-from : ‚Ñï ‚Üí LOOP-program ‚Üí LOOP-program 
program-from  0                    p  = []
program-from  1                    [] = []
program-from  1              (x :: p) = p
program-from (succ (succ n))       [] = []
program-from (succ (succ n)) (x :: p) = program-from (succ n) p


-- Ejemplo 1. 
-- El programa vac√≠o es un LOOP-programa.
empty-program : LOOP-program
empty-program = END 

-- Ejemplo 2. Un LOOP-programa con varias instrucciones.
_ : LOOP-program
_  = 
    INC (X 1)       :: 
    INC (X 1)       :: 
    END  

-- Ejemplo 3. Un LOOP-programa con bucles.
eg-LOOP : LOOP-program
eg-LOOP = 
    LOOP (X 1) DO (
        INC X‚ÇÄ      :: 
    END)            :: 
    LOOP (X 2) DO (
        INC X‚ÇÄ      :: 
    END)            :: 
    END 

--
-- 2. Interpretaci√≥n de los LOOP-programas
--

-- 2.1. Un estado de un LOOP-programa es una lista de manera que el valor en la
-- posici√≥n n-√©sima representa el valor que toma la variable X n.

STATE = List ‚Ñï

-- Ejemplo de estado: X‚ÇÄ = 3, X‚ÇÅ = 1, X‚ÇÇ = 5
eg-œÉ : STATE
eg-œÉ = 3 :: 1 :: 5 :: []

-- 2.2. El valor de la variable X n se puede recuperar. Si en la posici√≥n 
-- n-√©sima no hay ning√∫n valor, se entiende que la variable toma el valor 0.
value-at : STATE ‚Üí VAR ‚Üí ‚Ñï 
value-at []         _           = 0 
value-at (x :: _)  (X 0)        = x
value-at (_ :: xs) (X (succ n)) = value-at xs (X n)

-- Ejemplos: 
_ : value-at eg-œÉ (X 2) Ôºù 5 
_ = refl _

_ : value-at eg-œÉ (X 7) Ôºù 0 
_ = refl _ 

-- 2.3. Operaciones con estados

-- 2.3.1. Borrar el valor de una variable en un estado.
clear-value : STATE ‚Üí VAR ‚Üí STATE 
clear-value []         x           = []
clear-value (y‚ÇÄ :: œÉ) (X zero)     = 0 :: œÉ
clear-value (y‚ÇÄ :: œÉ) (X (succ n)) = y‚ÇÄ :: clear-value œÉ (X n)

_ : clear-value eg-œÉ (X 2) Ôºù (3 :: 1 :: 0 :: [])
_ = refl _

-- 2.3.2. Incrementar el valor de una variable en un estado.
inc-value : STATE ‚Üí VAR ‚Üí STATE 
inc-value []        (X 0)        = 1 :: []
inc-value (y‚ÇÄ :: œÉ) (X 0)        = (y‚ÇÄ + 1) :: œÉ
inc-value []        (X (succ n)) = 0 :: (inc-value [] (X n))
inc-value (y‚ÇÄ :: œÉ) (X (succ n)) = y‚ÇÄ :: (inc-value œÉ (X n))

_ : inc-value eg-œÉ (X 2) Ôºù (3 :: 1 :: 6 :: [])
_ = refl _

_ : inc-value eg-œÉ (X 4) Ôºù (3 :: 1 :: 5 :: 0 :: 1 :: [])
_ = refl _


-- 2.4. El estado inicial de una tupla (x‚ÇÅ, ..., x‚Çô) es el que pone en las 
-- variables los valores X‚ÇÄ = 0, X 1 = x‚ÇÅ, ..., X n = x‚Çô.
INIT-STATE' : {n : ‚Ñï} ‚Üí ‚Ñï^ n ‚Üí STATE
INIT-STATE' {0}             _        = []
INIT-STATE' {1}             x        = x :: []
INIT-STATE' {succ (succ n)} (x , xs) = x :: INIT-STATE' xs

INIT-STATE : {n : ‚Ñï} ‚Üí ‚Ñï^ n ‚Üí STATE
INIT-STATE xs = 0 :: INIT-STATE' xs

init-state'-has-len-n : {n : ‚Ñï} ‚Üí (xs : ‚Ñï^ n) ‚Üí len (INIT-STATE' xs) Ôºù n 
init-state'-has-len-n {0}              _       = refl 0
init-state'-has-len-n {1}              x       = refl 1
init-state'-has-len-n {succ (succ n)} (x , xs) = ap succ (init-state'-has-len-n xs)
 
-- 2.5. Dado una tupla inicial y un programa, podemos hablar del estado
-- resultante de la ejecuci√≥n del programa.

interleaved mutual
    loop-n-times : ‚Ñï ‚Üí STATE ‚Üí LOOP-program ‚Üí STATE
    execution-from-state : STATE ‚Üí LOOP-program ‚Üí STATE
    
    -- Interpretaci√≥n de las intrucciones de un LOOP-programa:

    -- Ejecutar un programa vac√≠o no cambia el estado de las variables.
    execution-from-state œÉ‚ÇÄ []                    = œÉ‚ÇÄ
    
    -- Ejecutar la instrucci√≥n CLEAR x borra el valor de la variable x en el
    -- estado œÉ‚ÇÄ.
    execution-from-state œÉ‚ÇÄ (CLEAR x :: p)        = execution-from-state (clear-value œÉ‚ÇÄ x) p

    -- Ejecutar la instrucci√≥n INC x aumenta en uno el valor de la variable x 
    -- en el estado œÉ‚ÇÄ.
    execution-from-state œÉ‚ÇÄ (INC x :: p)          = execution-from-state (inc-value œÉ‚ÇÄ x) p

    -- Ejecutar la instrucci√≥n LOOP x do p' ejecuta el subprograma p' y veces,
    -- donde y es el valor que toma la variable x, y siendo la ejecuci√≥n
    -- inicial de p a partir del estado œÉ‚ÇÄ, y las sucesivas iteraciones con los
    -- estados obtenidos de las iteraciones anteriores.
    execution-from-state œÉ‚ÇÄ ((LOOP x DO p') :: p) = execution-from-state (loop-n-times (value-at œÉ‚ÇÄ x) œÉ‚ÇÄ p') p

    loop-n-times 0 œÉ‚ÇÄ p = œÉ‚ÇÄ
    loop-n-times (succ n) œÉ‚ÇÄ p = loop-n-times n (execution-from-state œÉ‚ÇÄ p) p

-- 2.6. La funci√≥n de aridad n calculada por un LOOP-programa p es la funci√≥n
-- que a cada tupla xs : ‚Ñï^ n le asocia el valor final de la variable X‚ÇÄ al
-- ejecutarse p desde el estado inicial de xs.
‚ü¶_‚üß^ : LOOP-program ‚Üí (n : ‚Ñï)
    ‚Üí ‚Ñï^ n ‚Üí ‚Ñï
‚ü¶ p ‚üß^(n) xs = value-at (execution-from-state (INIT-STATE xs) p) X‚ÇÄ

-- Ejemplos
_ : ‚ü¶ empty-program ‚üß^(2) (23 , 4) Ôºù 0 
_ = refl _

_ : ‚ü¶ eg-LOOP ‚üß^(2) (23 , 4) Ôºù 27
_ = refl _

-- Lema que ser√° √∫til para probar propiedades.
loop-n-times-is-additon : (n : ‚Ñï) ‚Üí (y‚ÇÄ : ‚Ñï) ‚Üí (xs : List ‚Ñï) ‚Üí loop-n-times n (y‚ÇÄ :: xs) (INC X‚ÇÄ :: END) Ôºù (y‚ÇÄ + n :: xs)
loop-n-times-is-additon  0       y‚ÇÄ xs = refl (y‚ÇÄ :: xs)
loop-n-times-is-additon (succ n) y‚ÇÄ xs = (loop-n-times-is-additon n (y‚ÇÄ + 1) xs) ‚àô (ap (_:: xs) (Peano.succ+y y‚ÇÄ n))

-- Proposici√≥n: la funci√≥n de aridad 2 calculada por eg-LOOP es la suma de los
-- par√°metros de entrada.
eg-LOOP-is-addition : (x y : ‚Ñï) ‚Üí ‚ü¶ eg-LOOP ‚üß^(2) (x , y) Ôºù x + y 
eg-LOOP-is-addition x y = 
    ‚ü¶ eg-LOOP ‚üß^ 2 (x , y) 
        Ôºù‚ü® refl _ ‚ü© 
    value-at (execution-from-state (INIT-STATE (x , y)) eg-LOOP) X‚ÇÄ
        Ôºù‚ü® ap (Œª t ‚Üí value-at t X‚ÇÄ) final-state ‚ü© 
    value-at ((x + y) :: x :: y :: []) X‚ÇÄ
        Ôºù‚ü® refl _ ‚ü© 
    x + y
    ‚àé where

    -- Seguimiento de la ejecuci√≥n del programa.
    final-state : execution-from-state (INIT-STATE (x , y)) eg-LOOP Ôºù (x + y) :: x :: y :: []
    final-state = 
        execution-from-state (INIT-STATE (x , y)) eg-LOOP 
            Ôºù‚ü® refl _ ‚ü© 
        execution-from-state (0 :: x :: y :: []) eg-LOOP 
            Ôºù‚ü® refl _ ‚ü© 
        execution-from-state (loop-n-times x (0 :: x :: y :: []) (INC X‚ÇÄ :: END)) (program-from 1 eg-LOOP)
            Ôºù‚ü® ap (Œª t ‚Üí execution-from-state t (program-from 1 eg-LOOP)) (loop-n-times-is-additon x 0 (x :: y :: [])) ‚ü© 
        execution-from-state ((0 + x) :: x :: y :: []) (program-from 1 eg-LOOP)
            Ôºù‚ü® refl _ ‚ü© 
        loop-n-times y (0 + x :: x :: y :: []) (INC X‚ÇÄ :: END)
            Ôºù‚ü® loop-n-times-is-additon y (0 + x) (x :: y :: []) ‚ü© 
        0 + x + y :: x :: y :: []
            Ôºù‚ü® ap (Œª t ‚Üí t + y :: x :: y :: []) (Peano.zero+n x) ‚ü© 
        x + y :: x :: y :: []
        ‚àé

-- 
-- 3. Funciones LOOP-computables 
--

-- 3.1. Una funci√≥n f de aridad n se dice LOOP-computable si existe un
-- LOOP-programa p tal que la funci√≥n de aridad n calculada por p es f.
LOOP-computable‚Åø : (n : ‚Ñï) ‚Üí (‚Ñï^ n ‚Üí ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá 
LOOP-computable‚Åø n f = Œ£ p Íûâ LOOP-program , ‚ü¶ p ‚üß^(n) Ôºù f

-- Podemos omitir la aridad.
LOOP-computable : {n : ‚Ñï} ‚Üí (‚Ñï^ n ‚Üí ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá 
LOOP-computable {n} = LOOP-computable‚Åø n

-- Como proposici√≥n:
LOOP-computable‚Åø-prop : (n : ‚Ñï) ‚Üí (‚Ñï^ n ‚Üí ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá 
LOOP-computable‚Åø-prop n f = ‚à• LOOP-computable‚Åø n f ‚à•

LOOP-computable-prop : {n : ‚Ñï} ‚Üí (‚Ñï^ n ‚Üí ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá 
LOOP-computable-prop {n} = LOOP-computable‚Åø-prop n

-- Ejemplo:
uncurry-addition-is-LOOP-computable : LOOP-computable uncurry-addition
uncurry-addition-is-LOOP-computable = eg-LOOP , (funext (Œª x ‚Üí eg-LOOP-is-addition (pr‚ÇÅ x) (pr‚ÇÇ x)))


--
-- 4. Las funciones primitivas recursivas son LOOP-computables
--

-- 4.1. Funciones calculadas por LOOP-programas limpiamente

-- Para probar que toda funci√≥n recursiva primitva es LOOP-computable, vamos a
-- probar que las funciones b√°sicas son LOOP-computables, y que ser 
-- LOOP-computable es cerrado por composici√≥n y recursi√≥n. Usando ùìüùì°-induction,
-- se tiene.

-- En realidad, probaremos primero que toda funci√≥n recursiva primitiva es 
-- calculada por un LOOP-programa limpiamente

-- Un LOOP-programa p calcula una funci√≥n f : ‚Ñï^ n ‚Üí ‚Ñï limpiamente si la
-- funci√≥n de aridad n calculada por p es f, y adem√°s, en el c√°lculo de la 
-- funci√≥n ‚ü¶ p ‚üß^(n), el valor final de las variables X 1 hasta X n es el mismo
-- que ten√≠an inicialmente. Adem√°s, suponemos que en las restantes variables
-- que aparecen en p y no sean X‚ÇÄ, el valor inicial es 0, e imponemos que al
-- finalizar, su valor sea 0 tambi√©n. Estas variables, por tanto, servir√°n como
-- variables auxiliares.

-- En la referencia usada para formalizar esta idea, que puede encontrarse en
-- https://ai.dmi.unibas.ch/_files/teaching/fs16/theo/slides/theory-d05.pdf, el
-- concepto de programa que calcula una funci√≥n limpiamente es distinto: un 
-- programa es limpio si, tras su ejecuci√≥n, todas las variables tienen el
-- mismo valor que tomaban al principio, a excepci√≥n de X‚ÇÄ. Pero esto tiene
-- problemas. Concretamente, supongamos que estamos escribiendo un programa
-- que necesita usar una variable auxiliar X n. Como el programa tiene que ser
-- limpio, despu√©s de la ejecuci√≥n, tenemos que devolver el valor que hab√≠a
-- inicialmente en X n. Pero la √∫nica forma de hacer esto es usando otra 
-- variable auxiliar, para la cual existir√≠a el mismo problema, y as√≠ 
-- comprobamos que esta noci√≥n de programa limpio no es la que buscamos..

-- Calcula el mayor √≠ndice que aparece en una variable del programa. Convenimos
-- que en el programa vac√≠o vale 0.
largest-index : LOOP-program ‚Üí ‚Ñï 
largest-index []                      = 0
largest-index (CLEAR (X n) :: p)      = max n (largest-index p)
largest-index (INC (X n) :: p)        = max n (largest-index p)
largest-index ((LOOP X n DO p') :: p) = max n (max (largest-index p') (largest-index p))

-- Una funci√≥n f de aridad n es calculada por un LOOP-programa limpiamente si
-- existe un LOOP-programa p para el cual:
--      - La funci√≥n ‚ü¶ p ‚üß^(n) es f. 
--      - Para una entrada xs = (x‚ÇÅ, ..., x‚Çô), si consideramos el estado 
--        inicial 0 :: x‚ÇÅ :: ... :: x‚Çô :: 0 :: ... :: 0, rellenando con 0 hasta
--        que se ponga a 0 la variable con √≠ndice m√°s grande que aparece en p,
--        el estado resultante tras ejecutar p es el mismo.
LOOP-computable-cleanly : {n : ‚Ñï} ‚Üí (‚Ñï^ n ‚Üí ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá 
LOOP-computable-cleanly {n} f = Œ£ p Íûâ LOOP-program , (((xs : ‚Ñï^ n) ‚Üí 
    execution-from-state ((INIT-STATE xs) concat (n-zeros-list ((largest-index p) ‚à∏ n))) p
        Ôºù (f xs :: INIT-STATE' xs) concat (n-zeros-list ((largest-index p) ‚à∏ n)))
    ) 

-- Comportamiento de clear-value en un estado 
clear-value-sets-value-to-zero : (œÉ : STATE) ‚Üí (r r' : ‚Ñï) ‚Üí 
    value-at (clear-value œÉ (X r)) (X r') Ôºù if (‚Ñï-has-decidable-equality r r') then 0 else (value-at œÉ (X r'))
clear-value-sets-value-to-zero [] r r' = (b-or-b-then-b (‚Ñï-has-decidable-equality r r') 0) ‚Åª¬π
clear-value-sets-value-to-zero (x :: œÉ)  0        0        = refl 0
clear-value-sets-value-to-zero (x :: œÉ)  0       (succ r') = refl _
clear-value-sets-value-to-zero (x :: œÉ) (succ r)  0        = refl x
clear-value-sets-value-to-zero (x :: œÉ) (succ r) (succ r') = (
    value-at (clear-value œÉ (X r)) (X r') 
        Ôºù‚ü® clear-value-sets-value-to-zero œÉ r r' ‚ü© 
    if ‚Ñï-has-decidable-equality r r' then 0 else value-at œÉ (X r') 
        ‚àé) ‚àô (if-dec-eq‚Ñï r r' 0 (value-at œÉ (X r') )) 

-- Comportamiento de inc-value en un estado
inc-value-increments-value : (œÉ : STATE) ‚Üí (r r' : ‚Ñï) ‚Üí 
    value-at (inc-value œÉ (X r)) (X r') Ôºù if (‚Ñï-has-decidable-equality r r') then (succ (value-at œÉ (X r'))) else (value-at œÉ (X r'))
inc-value-increments-value []        0        0        = refl 1
inc-value-increments-value []        0       (succ r') = refl 0
inc-value-increments-value []       (succ r)         0 = refl 0
inc-value-increments-value []       (succ r) (succ r') = inc-value-increments-value [] r r' ‚àô (if-dec-eq‚Ñï r r' 1 0)
inc-value-increments-value (x :: œÉ)  0        0        = refl (succ x)
inc-value-increments-value (x :: œÉ)  0       (succ r') = refl (value-at œÉ (X r'))
inc-value-increments-value (x :: œÉ) (succ r)  0        = refl x
inc-value-increments-value (x :: œÉ) (succ r) (succ r') = inc-value-increments-value œÉ r r' ‚àô (if-dec-eq‚Ñï r r' (succ (value-at œÉ (X r'))) (value-at œÉ (X r')))

-- A√±adir ceros a una lista no cambia los valores 
append-zeroes-does-not-change-values : (k : ‚Ñï) ‚Üí (œÉ : STATE) ‚Üí (r : ‚Ñï)
    ‚Üí value-at œÉ (X r) Ôºù value-at (œÉ concat (n-zeros-list k)) (X r) 
append-zeroes-does-not-change-values  0       []        _       = refl 0
append-zeroes-does-not-change-values (succ k) []        0       = refl 0
append-zeroes-does-not-change-values (succ k) []       (succ r) = append-zeroes-does-not-change-values k (0 :: []) (succ r)
append-zeroes-does-not-change-values  0       (x :: œÉ)  0       = refl x
append-zeroes-does-not-change-values  0       (x :: œÉ) (succ r) = append-zeroes-does-not-change-values zero œÉ r
append-zeroes-does-not-change-values (succ k) (x :: œÉ)  0       = refl x
append-zeroes-does-not-change-values (succ k) (x :: œÉ) (succ r) = append-zeroes-does-not-change-values (succ k) œÉ r

-- Dos estados con los mismos valores tienen la misma ejecuci√≥n
same-values-same-execution : (p : LOOP-program) ‚Üí (k : ‚Ñï) ‚Üí (œÉ œÑ : STATE) 
    ‚Üí ((k' : ‚Ñï) ‚Üí value-at œÉ (X k') Ôºù value-at œÑ (X k'))
    ‚Üí value-at (execution-from-state œÉ p) (X k) Ôºù value-at (execution-from-state œÑ p) (X k)
same-values-same-execution [] k œÉ œÑ same-values = same-values k
same-values-same-execution (CLEAR (X x) :: p) k œÉ œÑ same-values = same-values-same-execution p k (clear-value œÉ (X x)) (clear-value œÑ (X x)) Œª k' ‚Üí 
    value-at (clear-value œÉ (X x)) (X k') 
        Ôºù‚ü® clear-value-sets-value-to-zero œÉ x k' ‚ü© 
    if (‚Ñï-has-decidable-equality x k') then 0 else (value-at œÉ (X k'))
        Ôºù‚ü® ap (if (‚Ñï-has-decidable-equality x k') then 0 else_) (same-values k') ‚ü© 
    if (‚Ñï-has-decidable-equality x k') then 0 else (value-at œÑ (X k'))
        Ôºù‚ü® (clear-value-sets-value-to-zero œÑ x k') ‚Åª¬π ‚ü© 
    value-at (clear-value œÑ (X x)) (X k') 
    ‚àé
same-values-same-execution (INC (X x) :: p) k œÉ œÑ same-values = same-values-same-execution p k (inc-value œÉ (X x)) (inc-value œÑ (X x)) Œª k' ‚Üí 
    value-at (inc-value œÉ (X x)) (X k') 
        Ôºù‚ü® inc-value-increments-value œÉ x k' ‚ü© 
    if (‚Ñï-has-decidable-equality x k') then (succ (value-at œÉ (X k'))) else (value-at œÉ (X k'))
        Ôºù‚ü® ap (if (‚Ñï-has-decidable-equality x k') then (succ (value-at œÉ (X k'))) else_) (same-values k') ‚ü© 
    if (‚Ñï-has-decidable-equality x k') then (succ (value-at œÉ (X k'))) else (value-at œÑ (X k'))
        Ôºù‚ü® ap (if (‚Ñï-has-decidable-equality x k') then_else (value-at œÑ (X k'))) (ap succ (same-values k')) ‚ü© 
    if (‚Ñï-has-decidable-equality x k') then (succ (value-at œÑ (X k'))) else (value-at œÑ (X k'))
        Ôºù‚ü® (inc-value-increments-value œÑ x k') ‚Åª¬π ‚ü© 
    value-at (inc-value œÑ (X x)) (X k') 
    ‚àé
same-values-same-execution ((LOOP (X x) DO p') :: p) k œÉ œÑ same-values = same-values-same-execution p k (loop-n-times (value-at œÉ (X x)) œÉ p') (loop-n-times (value-at œÑ (X x)) œÑ p') 
    Œª k' ‚Üí same-values-same-loop-execution p' k œÉ œÑ same-values (value-at œÉ (X x)) k' ‚àô ap (Œª n ‚Üí value-at (loop-n-times n œÑ p') (X k')) (same-values x) where
    same-values-same-loop-execution : (p' : LOOP-program) ‚Üí (k : ‚Ñï) ‚Üí (œÉ œÑ : STATE) 
        ‚Üí ((k' : ‚Ñï) ‚Üí value-at œÉ (X k') Ôºù value-at œÑ (X k'))
        ‚Üí (n : ‚Ñï) ‚Üí (k' : ‚Ñï)
        ‚Üí value-at (loop-n-times n œÉ p') (X k') Ôºù value-at (loop-n-times n œÑ p') (X k')
    same-values-same-loop-execution p' k œÉ œÑ same-values zero k' = same-values k'
    same-values-same-loop-execution p' k œÉ œÑ same-values (succ n) k' = same-values-same-loop-execution p' k (execution-from-state œÉ p') (execution-from-state œÑ p') (Œª k' ‚Üí same-values-same-execution p' k' œÉ œÑ same-values) n k'

-- A√±adir ceros a la entrada inical no cambia ning√∫n valor tras la ejecuci√≥n
append-zeros-does-not-change-values-after-execution : {n : ‚Ñï} ‚Üí (p : LOOP-program) ‚Üí (k : ‚Ñï) ‚Üí (xs : ‚Ñï^ n) 
    ‚Üí (r : ‚Ñï)
    ‚Üí value-at (execution-from-state (INIT-STATE xs) p) (X r)
        Ôºù value-at (execution-from-state ((INIT-STATE xs) concat (n-zeros-list k)) p) (X r)
append-zeros-does-not-change-values-after-execution {n} p k xs r = same-values-same-execution p r (INIT-STATE xs) (INIT-STATE xs concat n-zeros-list k) (append-zeroes-does-not-change-values k (INIT-STATE xs))

-- A√±adir ceros a la entrada inicial no cambia la salida del programa
append-zeros-does-not-change-final-value : {n : ‚Ñï} ‚Üí (p : LOOP-program) ‚Üí (k : ‚Ñï) ‚Üí (xs : ‚Ñï^ n) 
    ‚Üí value-at (execution-from-state (INIT-STATE xs) p) X‚ÇÄ
        Ôºù value-at (execution-from-state ((INIT-STATE xs) concat (n-zeros-list k)) p) X‚ÇÄ
append-zeros-does-not-change-final-value {n} p k xs = append-zeros-does-not-change-values-after-execution p k xs 0

-- LOOP-program-is-clean : LOOP-program ‚Üí ùì§‚ÇÄ Ãá 
-- LOOP-program-is-clean p = (x‚ÇÄ : ‚Ñï) ‚Üí (œÉ : STATE) ‚Üí Œ£ k Íûâ ‚Ñï , Œ£ y‚ÇÄ Íûâ ‚Ñï , 
--     execution-from-state (x‚ÇÄ :: œÉ) p Ôºù (y‚ÇÄ :: œÉ) concat (n-zeros-list k)

-- Toda funci√≥n que es LOOP-computable limpiamente es LOOP-computable.
LOOP-computable-cleanly-is-LOOP-computable : {n : ‚Ñï} ‚Üí {f : ‚Ñï^ n ‚Üí ‚Ñï}
    ‚Üí LOOP-computable-cleanly f ‚Üí LOOP-computable f
LOOP-computable-cleanly-is-LOOP-computable {n} {f} (p , p-c-f) = p , (funext (Œª xs ‚Üí 
    ‚ü¶ p ‚üß^ n xs 
        Ôºù‚ü® refl _ ‚ü© 
    value-at (execution-from-state (INIT-STATE xs) p) X‚ÇÄ
        Ôºù‚ü® append-zeros-does-not-change-final-value p ((largest-index p) ‚à∏ n) xs ‚ü© 
    value-at (execution-from-state ((INIT-STATE xs) concat (n-zeros-list ((largest-index p) ‚à∏ n))) p) X‚ÇÄ
        Ôºù‚ü® ap (Œª œÉ ‚Üí value-at œÉ X‚ÇÄ) (p-c-f xs)‚ü© 
    value-at ((f xs :: INIT-STATE' xs) concat (n-zeros-list ((largest-index p) ‚à∏ n))) X‚ÇÄ
        Ôºù‚ü® refl _ ‚ü© 
    f xs 
    ‚àé))

-- 4.2. Las funciones b√°sicas son LOOP-computables limpiamente.

-- 4.2.1. La funci√≥n sucesor es LOOP-computable limpiamente.
succ-is-LOOP-computable-cleanly : LOOP-computable-cleanly succ
succ-is-LOOP-computable-cleanly = p , final-state where

    -- Programa que calcula el sucesor.
    p : LOOP-program
    p = LOOP (X 1) DO (
            INC X‚ÇÄ      :: 
        END)            :: 
        INC X‚ÇÄ          :: 
        END
    
    -- Seguimiento de la ejecuci√≥n del programa.
    final-state : (x : ‚Ñï) ‚Üí
        inc-value (loop-n-times x (0 :: x :: []) (INC X‚ÇÄ :: END)) X‚ÇÄ Ôºù
        succ x :: x :: []
    final-state x = 
        inc-value (loop-n-times x (0 :: x :: []) (INC X‚ÇÄ :: END)) X‚ÇÄ
            Ôºù‚ü® ap (Œª t ‚Üí inc-value t X‚ÇÄ) (loop-n-times-is-additon x 0 (x :: [])) ‚ü© 
        inc-value (0 + x :: x :: []) X‚ÇÄ
            Ôºù‚ü® refl _ ‚ü© 
        succ (0 + x) :: x :: []
            Ôºù‚ü® ap (Œª t ‚Üí (succ t) :: x :: []) (Peano.zero+n x) ‚ü© 
        succ x :: x :: []
        ‚àé

-- 4.2.1. La funci√≥n sucesor es limpia LOOP-computable.
zero-fun-n-is-LOOP-computable-cleanly : (n : ‚Ñï) ‚Üí LOOP-computable-cleanly (zero-fun n) 
zero-fun-n-is-LOOP-computable-cleanly n = empty-program , Œª xs ‚Üí refl (zero :: INIT-STATE' xs concat []) 


-- 4.2.3. Las k proyecciones de aridad n son LOOP-computables limpiamente.
œÄ-n-k-is-LOOP-computable-cleanly : (n : ‚Ñï) ‚Üí (k : ‚Ñï) ‚Üí {q : 1 ‚â§ k} ‚Üí {r : k ‚â§ n} ‚Üí LOOP-computable-cleanly (œÄ n k {q} {r})
œÄ-n-k-is-LOOP-computable-cleanly n k {q} {r} = p_k , final-state where

    -- Programa que calcula la proyecci√≥n en la k-√©sima coordenada.
    p_k : LOOP-program 
    p_k = 
        LOOP (X k) DO (
            INC X‚ÇÄ      :: 
        END)            ::
        END

    -- Lema 0: buscar en el vector list-n-to-vect-n xs no depende de la prueba 
    -- que xs tiene longitud n.
    lemma-0 : (n : ‚Ñï) ‚Üí (k : ‚Ñï) ‚Üí {r : 1 ‚â§ k} ‚Üí {s : k ‚â§ n}
        ‚Üí (xs : List ‚Ñï) ‚Üí (p q : len xs Ôºù n)
        ‚Üí lookup (list-n-to-vect-n (xs , p)) (!Fin k r s) Ôºù lookup (list-n-to-vect-n (xs , q)) (!Fin k r s)
    lemma-0  0        k              {r} {s} xs        p q = refl (ùüò-induction (Œª _ ‚Üí ‚Ñï) (!Fin k r s))
    lemma-0 (succ n)  k              {r} {s} []        p q = !ùüò _ (lr-implication (Eq‚Ñï-equiv-Id 0 (succ n)) p)
    lemma-0 (succ n)  0              {r} {s} (x :: xs) p q = !ùüò _ r
    lemma-0 (succ n)  1              {r} {s} (x :: xs) p q = refl x
    lemma-0 (succ n) (succ (succ k)) {r} {s} (x :: xs) p q = lemma-0 n (succ k) xs (succ-injective p) (succ-injective q)

    -- Lema 1: value-at es lo mismo que lookup.
    lemma-1 : (n : ‚Ñï) ‚Üí (k : ‚Ñï) ‚Üí {q : 1 ‚â§ k} ‚Üí {r : k ‚â§ n} ‚Üí (xs : ‚Ñï^ n) ‚Üí 
        value-at (INIT-STATE xs) (X k) Ôºù lookup (list-n-to-vect-n (INIT-STATE' xs , init-state'-has-len-n xs)) (!Fin k q r)
    lemma-1 n                0              {q} {r} _        = !ùüò _ q
    lemma-1 0                1              {q} {r} _        = !ùüò _ r
    lemma-1 1                1              {q} {r} x        = refl x
    lemma-1 (succ (succ n))  1              {q} {r} xs       = refl _
    lemma-1 0               (succ (succ k)) {q} {r} xs       = !ùüò _ r
    lemma-1 1               (succ (succ k)) {q} {r} xs       = !ùüò _ r
    lemma-1 (succ (succ n)) (succ (succ k)) {q} {r} (x , xs) = lemma-1 (succ n) (succ k) {q} {r} xs ‚àô 
        lemma-0 (succ n) (succ k) {q} {r} (INIT-STATE' xs) 
        (init-state'-has-len-n xs) ( succ-injective (ap succ (init-state'-has-len-n xs)))
    
    -- Lema 2: lookup es lo mismo que una proyecci√≥n.
    lemma-2 : (n : ‚Ñï) ‚Üí (k : ‚Ñï) ‚Üí {q : 1 ‚â§ k} ‚Üí {r : k ‚â§ n} ‚Üí (xs : ‚Ñï^ n)
        ‚Üí lookup (list-n-to-vect-n (INIT-STATE' xs , init-state'-has-len-n xs)) (!Fin k q r) Ôºù œÄ n k {q} {r} xs
    lemma-2 n                0              {q} {r} _        = !ùüò _ q
    lemma-2 0               (succ k)        {q} {r} _        = refl (ùüò-induction (Œª _ ‚Üí ‚Ñï) (!Fin (succ k) q r))
    lemma-2 1                1              {q} {r} x        = refl x
    lemma-2 1               (succ (succ k)) {q} {r} x        = !ùüò _ r
    lemma-2 (succ (succ n))  1              {q} {r} xs       = refl _
    lemma-2 (succ (succ n)) (succ (succ k)) {q} {r} (x , xs) = 
        (lemma-0 (succ n) (succ k) {q} {r} (INIT-STATE' xs) (succ-injective (ap succ (init-state'-has-len-n xs))) ( init-state'-has-len-n xs)) 
            ‚àô lemma-2 (succ n) (succ k) {q} {r} xs

    -- Lema 3: value-at X k es una proyecci√≥n.
    lemma-3 : (xs : ‚Ñï^ n) ‚Üí value-at (INIT-STATE xs) (X k) Ôºù œÄ n k {q} {r} xs
    lemma-3 xs = lemma-1 n k {q} {r} xs ‚àô (lemma-2 n k {q} {r} xs)

    -- Seguimiento de la ejecuci√≥n del programa.
    final-state : (xs : ‚Ñï^ n)
        ‚Üí execution-from-state ((INIT-STATE xs) concat n-zeros-list (max k 0 ‚à∏ n)) p_k
        Ôºù (œÄ n k {q} {r} xs :: INIT-STATE' xs) concat n-zeros-list (max k 0 ‚à∏ n)
    final-state xs = 
        execution-from-state ((INIT-STATE xs) concat n-zeros-list (max k 0 ‚à∏ n)) p_k
            Ôºù‚ü® ap (Œª t ‚Üí execution-from-state (INIT-STATE xs concat t) p_k ) list-is-empty ‚ü© 
        execution-from-state (INIT-STATE xs concat []) p_k 
            Ôºù‚ü® ap (Œª t ‚Üí execution-from-state t p_k) ( (INIT-STATE xs) concat-[]) ‚ü© 
        execution-from-state (INIT-STATE xs) p_k 
            Ôºù‚ü® refl _ ‚ü©
        loop-n-times (value-at (INIT-STATE xs) (X k)) (INIT-STATE xs) (INC X‚ÇÄ :: END) 
            Ôºù‚ü® loop-n-times-is-additon (value-at (INIT-STATE xs) (X k)) 0 (INIT-STATE' xs) ‚ü© 
        0 + value-at (INIT-STATE xs) (X k) :: INIT-STATE' xs
            Ôºù‚ü® ap (_:: INIT-STATE' xs) (Peano.zero+n (value-at (INIT-STATE xs) (X k))) ‚ü© 
        value-at (INIT-STATE xs) (X k) :: INIT-STATE' xs
            Ôºù‚ü® ap (_:: INIT-STATE' xs) (lemma-3 xs) ‚ü© 
        œÄ n k {q} {r} xs :: INIT-STATE' xs
            Ôºù‚ü® ((œÄ n k {q} {r} xs :: INIT-STATE' xs) concat-[]) ‚Åª¬π ‚ü© 
        œÄ n k {q} {r} xs :: INIT-STATE' xs concat []
            Ôºù‚ü® ap (Œª t ‚Üí œÄ n k {q} {r} xs :: INIT-STATE' xs concat t) (list-is-empty ‚Åª¬π) ‚ü© 
        œÄ n k {q} {r} xs :: INIT-STATE' xs concat n-zeros-list (max k 0 ‚à∏ n)
        ‚àé where

        is-zero : max k 0 ‚à∏ n Ôºù 0 
        is-zero = 
            max k 0 ‚à∏ n
                Ôºù‚ü® ap (_‚à∏ n) (max-x-zero-is-x k) ‚ü© 
            k ‚à∏ n 
                Ôºù‚ü® x‚à∏‚â§-is-zero k n r ‚ü© 
            0
            ‚àé

        list-is-empty : n-zeros-list (max k 0 ‚à∏ n) Ôºù []
        list-is-empty = ap n-zeros-list is-zero

-- 4.3. LOOP-computable es cerrado por composici√≥n

-- clear-value solo afecta a las succ (largest-index p) posiciones.
clear-value-changes-succ-largest-index-p-positions : (œÉ œÑ : STATE)
    -- ‚Üí len œÉ Ôºù succ (largest-index p) 
    -- k ‚â§ largest-index p
    ‚Üí (k : ‚Ñï) ‚Üí (succ k ‚â§ len œÉ)
    ‚Üí clear-value (œÉ concat œÑ) (X k) Ôºù (clear-value œÉ (X k)) concat œÑ 
clear-value-changes-succ-largest-index-p-positions []       _  _       k‚â§large = !ùüò _ k‚â§large
clear-value-changes-succ-largest-index-p-positions (x :: œÉ) œÑ  0       k‚â§large = refl (0 :: œÉ concat œÑ)
clear-value-changes-succ-largest-index-p-positions (x :: œÉ) œÑ (succ k) k‚â§large = ap (x ::_) (clear-value-changes-succ-largest-index-p-positions œÉ œÑ k k‚â§large)

-- clear-value no cambia la longitud de un estado.
clear-value-preserves-len : (œÉ : STATE) ‚Üí (k : ‚Ñï)
    ‚Üí len (clear-value œÉ (X k)) Ôºù len œÉ  
clear-value-preserves-len []        0       = refl 0
clear-value-preserves-len []       (succ k) = refl 0
clear-value-preserves-len (x :: œÉ)  0       = refl (succ (len œÉ))
clear-value-preserves-len (x :: œÉ) (succ k) = ap succ (clear-value-preserves-len œÉ k)

-- inc-value solo afecta a las succ (largest-index p) posiciones.
inc-value-changes-succ-largest-index-p-positions : (œÉ œÑ : STATE)
    ‚Üí (k : ‚Ñï) ‚Üí (succ k ‚â§ len œÉ)
    ‚Üí inc-value (œÉ concat œÑ) (X k) Ôºù (inc-value œÉ (X k)) concat œÑ 
inc-value-changes-succ-largest-index-p-positions []       _  _       k‚â§large = !ùüò _ k‚â§large
inc-value-changes-succ-largest-index-p-positions (x :: œÉ) œÑ  0       k‚â§large = refl (succ x :: œÉ concat œÑ)
inc-value-changes-succ-largest-index-p-positions (x :: œÉ) œÑ (succ k) k‚â§large = ap (x ::_) (inc-value-changes-succ-largest-index-p-positions œÉ œÑ k k‚â§large)

-- inc-value no cambia la longitud de un estado suficientemente grande
inc-value-preserves-len : (œÉ : STATE) ‚Üí (k : ‚Ñï)
    ‚Üí (succ k ‚â§ len œÉ)
    ‚Üí len (inc-value œÉ (X k)) Ôºù len œÉ  
inc-value-preserves-len [] _ succ-k‚â§len-œÉ = !ùüò _ succ-k‚â§len-œÉ
inc-value-preserves-len (x :: œÉ) 0 succ-k‚â§len-œÉ = refl (succ (len œÉ))
inc-value-preserves-len (x :: œÉ) (succ k) succ-k‚â§len-œÉ = ap succ (inc-value-preserves-len œÉ k succ-k‚â§len-œÉ)

-- value-at solo afecta a las primeras n posiciones.
value-at-only-first-n-positions : (œÉ œÑ : STATE) ‚Üí (k : ‚Ñï) ‚Üí (succ k ‚â§ len œÉ)
    ‚Üí value-at (œÉ concat œÑ) (X k) Ôºù value-at œÉ (X k)
value-at-only-first-n-positions  []      _  _       k-not-large = !ùüò _ k-not-large
value-at-only-first-n-positions (x :: œÉ) _  0       k-not-large = refl x
value-at-only-first-n-positions (x :: œÉ) œÑ (succ k) k-not-large = value-at-only-first-n-positions œÉ œÑ k k-not-large

-- Ejecutar un programa sobre un estado lo suficientemente grande no aumenta la
-- longitud del estado
execution-from-large-state-doesn't-change-size : (p : LOOP-program) ‚Üí (œÉ : STATE) 
    ‚Üí len œÉ ‚â• succ (largest-index p)
    ‚Üí len (execution-from-state œÉ p) Ôºù len œÉ
execution-from-large-state-doesn't-change-size [] œÉ œÉ-large = refl _
execution-from-large-state-doesn't-change-size (CLEAR (X x) :: p) œÉ œÉ-large = (execution-from-large-state-doesn't-change-size p (clear-value œÉ (X x)) 
    (transport (succ (largest-index p) ‚â§_) (clear-value-preserves-len œÉ x ‚Åª¬π) (‚â§-transitive {succ (largest-index p)} {succ (max x (largest-index p))} {len œÉ} (y‚â§max x (largest-index p)) œÉ-large))) 
    ‚àô (clear-value-preserves-len œÉ x )
execution-from-large-state-doesn't-change-size (INC (X x) :: p) œÉ œÉ-large = execution-from-large-state-doesn't-change-size p (inc-value œÉ (X x)) 
    (transport (succ (largest-index p) ‚â§_) (aux-eq ‚Åª¬π) (‚â§-transitive {succ (largest-index p)} {succ (max x (largest-index p))} {len œÉ} (y‚â§max x (largest-index p)) œÉ-large)) 
    ‚àô aux-eq where
        aux-eq : len (inc-value œÉ (X x)) Ôºù len œÉ
        aux-eq = inc-value-preserves-len œÉ x (‚â§-transitive {succ x} {succ (max x (largest-index p))} {len œÉ} (x‚â§max x (largest-index p)) œÉ-large)
execution-from-large-state-doesn't-change-size ((LOOP X x DO p') :: p) œÉ œÉ-large = execution-from-large-state-doesn't-change-size p (loop-n-times (value-at œÉ (X x)) œÉ p')
    (transport (succ (largest-index p) ‚â§_) (aux-eq ‚Åª¬π) 
    (‚â§-transitive {succ (largest-index p)} {succ (max x (max (largest-index p') (largest-index p)))} {len œÉ} 
        (z‚â§y-then-z‚â§max-x-y x (max (largest-index p') (largest-index p)) (largest-index p) (y‚â§max (largest-index p') (largest-index p))) œÉ-large)) 
    ‚àô aux-eq where

    lemma : (n : ‚Ñï) ‚Üí (p : LOOP-program) ‚Üí (œÉ : STATE) 
        ‚Üí len œÉ ‚â• succ (largest-index p)
        ‚Üí len (loop-n-times n œÉ p) Ôºù len œÉ
    lemma 0 p œÉ _ = refl (len œÉ)
    lemma (succ n) p œÉ q = lemma n p (execution-from-state œÉ p) 
        (transport (succ (largest-index p) ‚â§_) ((execution-from-large-state-doesn't-change-size p œÉ q) ‚Åª¬π) q) 
        ‚àô (execution-from-large-state-doesn't-change-size p œÉ q)

    largest-index-p'‚â§max-max : largest-index p' ‚â§ max x (max (largest-index p') (largest-index p))
    largest-index-p'‚â§max-max = z‚â§y-then-z‚â§max-x-y x (max (largest-index p') (largest-index p)) (largest-index p') (x‚â§max (largest-index p') (largest-index p))

    aux-eq : len (loop-n-times (value-at œÉ (X x)) œÉ p') Ôºù len œÉ
    aux-eq = lemma (value-at œÉ (X x)) p' œÉ (‚â§-transitive {succ (largest-index p')} { succ (max x (max (largest-index p') (largest-index p)))} {len œÉ} largest-index-p'‚â§max-max œÉ-large)


-- A√±adir valores tras la √∫ltima variable del programa no afecta a la 
-- ejecuci√≥n.
variables-after-largest-variable-don't-matter' : (p : LOOP-program) ‚Üí (œÉ œÑ : STATE)
    ‚Üí len œÉ ‚â• succ (largest-index p) 
    ‚Üí execution-from-state (œÉ concat œÑ) p Ôºù (execution-from-state œÉ p) concat œÑ
variables-after-largest-variable-don't-matter' []                      œÉ œÑ œÉ-large = refl (œÉ concat œÑ)
variables-after-largest-variable-don't-matter' (CLEAR (X x) :: p)      œÉ œÑ œÉ-large = 
    execution-from-state (clear-value (œÉ concat œÑ) (X x)) p
        Ôºù‚ü® ap (Œª s ‚Üí execution-from-state s p) (clear-value-changes-succ-largest-index-p-positions œÉ œÑ x succ-x‚â§len-œÉ) ‚ü© 
    execution-from-state (clear-value œÉ (X x) concat œÑ) p 
        Ôºù‚ü® variables-after-largest-variable-don't-matter' p (clear-value œÉ (X x)) œÑ succ-largest‚â§len-clear ‚ü© 
    execution-from-state (clear-value œÉ (X x)) p concat œÑ
    ‚àé where

    succ-x‚â§len-œÉ : succ x ‚â§ len œÉ 
    succ-x‚â§len-œÉ = ‚â§-transitive {succ x} {succ (max x (largest-index p))} {len œÉ} (x‚â§max x (largest-index p))  œÉ-large

    succ-largest‚â§len-clear : succ (largest-index p) ‚â§ len (clear-value œÉ (X x))
    succ-largest‚â§len-clear = transport (succ (largest-index p) ‚â§_) (clear-value-preserves-len œÉ x ‚Åª¬π) (
        ‚â§-transitive {succ (largest-index p)} {succ (max x (largest-index p))} {len œÉ} (y‚â§max x (largest-index p)) œÉ-large)

variables-after-largest-variable-don't-matter' (INC (X x) :: p)        œÉ œÑ œÉ-large = execution-from-state (inc-value (œÉ concat œÑ) (X x)) p
        Ôºù‚ü® ap (Œª s ‚Üí execution-from-state s p) (inc-value-changes-succ-largest-index-p-positions œÉ œÑ x succ-x‚â§len-œÉ) ‚ü© 
    execution-from-state (inc-value œÉ (X x) concat œÑ) p
        Ôºù‚ü® variables-after-largest-variable-don't-matter' p (inc-value œÉ (X x)) œÑ succ-largest‚â§len-inc ‚ü© 
    execution-from-state (inc-value œÉ (X x)) p concat œÑ
    ‚àé where

    succ-x‚â§len-œÉ : succ x ‚â§ len œÉ 
    succ-x‚â§len-œÉ = ‚â§-transitive {succ x} {succ (max x (largest-index p))} {len œÉ} (x‚â§max x (largest-index p))  œÉ-large

    succ-max‚â§len-œÉ : succ (max x 0) ‚â§ len œÉ 
    succ-max‚â§len-œÉ = transport (Œª t ‚Üí succ t ‚â§ len œÉ) (max-refl x 0 ‚Åª¬π) succ-x‚â§len-œÉ


    succ-largest‚â§len-inc : succ (largest-index p) ‚â§ len (inc-value œÉ (X x))
    succ-largest‚â§len-inc = transport (succ (largest-index p) ‚â§_) (execution-from-large-state-doesn't-change-size (INC (X x) :: END) œÉ succ-max‚â§len-œÉ  ‚Åª¬π) 
        (‚â§-transitive {succ (largest-index p)} {succ (max x (largest-index p))} {len œÉ} (y‚â§max x (largest-index p)) œÉ-large)

variables-after-largest-variable-don't-matter' ((LOOP X x DO p') :: p) œÉ œÑ œÉ-large = 
    (execution-from-state (loop-n-times (value-at (œÉ concat œÑ) (X x)) (œÉ concat œÑ) p') p
        Ôºù‚ü® ap (Œª t ‚Üí execution-from-state (loop-n-times t (œÉ concat œÑ) p') p) (value-at-only-first-n-positions œÉ œÑ x succ-x‚â§len-œÉ) ‚ü© 
    execution-from-state (loop-n-times (value-at œÉ (X x)) (œÉ concat œÑ) p') p
        Ôºù‚ü® ap (Œª s ‚Üí execution-from-state s p) (loop-n-times-concats-out p' œÉ œÑ len-œÉ‚â•succ-largest-p' (value-at œÉ (X x))) ‚ü© 
    execution-from-state (loop-n-times (value-at œÉ (X x)) œÉ p' concat œÑ) p
    ‚àé)  ‚àô variables-after-largest-variable-don't-matter' p (loop-n-times (value-at œÉ (X x)) œÉ p') œÑ 
            (transport (succ (largest-index p) ‚â§_) (execution-from-large-state-doesn't-change-size ((LOOP X x DO p') :: END) œÉ len-œÉ‚â•-succ ‚Åª¬π) succ-largest‚â§len-œÉ) where

    succ-x‚â§len-œÉ : succ x ‚â§ len œÉ 
    succ-x‚â§len-œÉ = ‚â§-transitive {succ x} {succ (max x (max (largest-index p') (largest-index p)))} {len œÉ} (x‚â§max x (max (largest-index p') (largest-index p))) œÉ-large

    succ-largest‚â§len-œÉ : succ (largest-index p) ‚â§ len œÉ
    succ-largest‚â§len-œÉ = ‚â§-transitive {succ (largest-index p)} {succ (max x (max (largest-index p') (largest-index p)))} {len œÉ} 
        (z‚â§y-then-z‚â§max-x-y x (max (largest-index p') (largest-index p)) (largest-index p) (y‚â§max (largest-index p') (largest-index p))) œÉ-large

    largest-index-p'‚â§max : largest-index p' ‚â§ max (largest-index p') (largest-index p)
    largest-index-p'‚â§max = x‚â§max (largest-index p') (largest-index p)

    len-œÉ‚â•-succ : len œÉ ‚â• succ (max x (max (largest-index p') 0))
    len-œÉ‚â•-succ = transport (Œª t ‚Üí succ (max x t) ‚â§ len œÉ) (max-refl (largest-index p') 0 ‚Åª¬π) 
        (‚â§-transitive {succ (max x (largest-index p'))} {succ (max x (max (largest-index p') (largest-index p)))} {len œÉ} 
        (y‚â§z-then-max-x-y‚â§max-x-z x (largest-index p') (max (largest-index p') (largest-index p)) (x‚â§max (largest-index p') (largest-index p))) œÉ-large)

    largest-index-p'‚â§max-max : largest-index p' ‚â§ max x (max (largest-index p') (largest-index p))
    largest-index-p'‚â§max-max = z‚â§y-then-z‚â§max-x-y x (max (largest-index p') (largest-index p)) (largest-index p') largest-index-p'‚â§max

    len-œÉ‚â•succ-largest-p' : len œÉ ‚â• succ (largest-index p')
    len-œÉ‚â•succ-largest-p' = ‚â§-transitive {succ (largest-index p')} { succ (max x (max (largest-index p') (largest-index p)))} {len œÉ} largest-index-p'‚â§max-max œÉ-large

    loop-n-times-concats-out : (p : LOOP-program) ‚Üí (œÉ œÑ : STATE) ‚Üí (len œÉ ‚â• succ (largest-index p) )
        ‚Üí (n : ‚Ñï) ‚Üí loop-n-times n (œÉ concat œÑ) p Ôºù (loop-n-times n œÉ p) concat œÑ
    loop-n-times-concats-out _ _ _ _        0       = refl _
    loop-n-times-concats-out p œÉ œÑ œÉ-large (succ n) = ap (Œª t ‚Üí loop-n-times n t p) (variables-after-largest-variable-don't-matter' p œÉ œÑ œÉ-large) 
        ‚àô loop-n-times-concats-out p (execution-from-state œÉ p) œÑ (transport (succ (largest-index p) ‚â§_) (execution-from-large-state-doesn't-change-size p œÉ œÉ-large ‚Åª¬π) œÉ-large) n

-- variables-after-largest-variable-don't-matter : (p : LOOP-program) ‚Üí (œÉ œÑ : STATE)
--     ‚Üí len œÉ Ôºù succ (largest-index p) 
--     ‚Üí execution-from-state (œÉ concat œÑ) p Ôºù (execution-from-state œÉ p) concat œÑ
-- variables-after-largest-variable-don't-matter p œÉ œÑ œÉ-large = variables-after-largest-variable-don't-matter' p œÉ œÑ (transport (len œÉ ‚â•_) œÉ-large (‚â§-reflexive (len œÉ)))

-- Podemos cononcer la ejecuci√≥n de un programa que calcula una funci√≥n 
-- primitiva recursiva limpiamente
execution-of-LOOP-computable-cleanly-with-aux-variables :
    {n : ‚Ñï} ‚Üí {f : ‚Ñï^ n ‚Üí ‚Ñï} ‚Üí {c : LOOP-computable-cleanly f}
    ‚Üí (xs : ‚Ñï^ n) ‚Üí (œÑ : STATE) 
    ‚Üí execution-from-state (((INIT-STATE xs) concat (n-zeros-list ((largest-index (pr‚ÇÅ c)) ‚à∏ n))) concat œÑ) (pr‚ÇÅ c)
        Ôºù ((f xs :: INIT-STATE' xs) concat (n-zeros-list ((largest-index (pr‚ÇÅ c)) ‚à∏ n))) concat œÑ
execution-of-LOOP-computable-cleanly-with-aux-variables {n} {f} {c} xs œÑ = 
    execution-from-state (œÉ concat œÑ) p 
        Ôºù‚ü® variables-after-largest-variable-don't-matter' p œÉ œÑ len-œÉ‚â•succ-largest-p ‚ü©
    execution-from-state œÉ p concat œÑ
        Ôºù‚ü® ap (_concat œÑ) ((pr‚ÇÇ c) xs) ‚ü© 
    (f xs :: INIT-STATE' xs concat n-zeros-list (largest-index p ‚à∏ n)) concat œÑ
    ‚àé where

    p = (pr‚ÇÅ c)

    œÉ = (INIT-STATE xs) concat (n-zeros-list ((largest-index p) ‚à∏ n))

    len-œÉ : len œÉ Ôºù succ (max (largest-index p) n) 
    len-œÉ = len-concat-is-sum-len (INIT-STATE xs) (n-zeros-list (largest-index p ‚à∏ n)) 
        ‚àô (
        succ (len (INIT-STATE' xs)) + len (n-zeros-list (largest-index p ‚à∏ n))
            Ôºù‚ü® ap (succ (len (INIT-STATE' xs)) +_) (len-zeros (largest-index p ‚à∏ n)) ‚ü© 
        succ (len (INIT-STATE' xs)) + (largest-index p ‚à∏ n)
            Ôºù‚ü® ap (Œª t ‚Üí succ t + (largest-index p ‚à∏ n)) (init-state'-has-len-n xs) ‚ü© 
        succ n + (largest-index p ‚à∏ n)
            Ôºù‚ü® Peano.succ+y n (largest-index p ‚à∏ n) ‚ü© 
        succ (n + (largest-index p ‚à∏ n))
            Ôºù‚ü® ap succ (diff-gets-max n (largest-index p)) ‚ü© 
        succ (max n (largest-index p))
            Ôºù‚ü® ap succ (max-refl n (largest-index p)) ‚ü© 
        succ (max (largest-index p) n)
        ‚àé)

    len-œÉ‚â•succ-largest-p : len œÉ ‚â• succ (largest-index p)
    len-œÉ‚â•succ-largest-p = ‚â§-transitive {succ (largest-index p)} {succ (max (largest-index p) n)} {len œÉ} (x‚â§max (largest-index p) n) 
        (transport (max (largest-index p) n ‚â§_) (succ-injective (len-œÉ ‚Åª¬π)) (‚â§-reflexive (max (largest-index p) n)))


-- Versi√≥n 2
execution-of-LOOP-computable-cleanly-with-aux-variables-2 :
    {n : ‚Ñï} ‚Üí {f : ‚Ñï^ n ‚Üí ‚Ñï} ‚Üí (c : LOOP-computable-cleanly f)
    ‚Üí (xs : ‚Ñï^ n) 
    ‚Üí (k : ‚Ñï) ‚Üí (k ‚â• (largest-index (pr‚ÇÅ c)) ‚à∏ n)
    ‚Üí (œÑ : STATE) 
    ‚Üí execution-from-state (((INIT-STATE xs) concat (n-zeros-list k)) concat œÑ) (pr‚ÇÅ c)
        Ôºù ((f xs :: INIT-STATE' xs) concat (n-zeros-list k)) concat œÑ
execution-of-LOOP-computable-cleanly-with-aux-variables-2 {n} {f} c xs k k‚â§max œÑ = 
    execution-from-state (œÉ‚ÇÅ concat œÑ) p
        Ôºù‚ü® ap (Œª t ‚Üí execution-from-state (((INIT-STATE xs) concat (n-zeros-list t)) concat œÑ) p) (q ‚Åª¬π) ‚ü© 
    execution-from-state (((INIT-STATE xs) concat (n-zeros-list (i-max + r))) concat œÑ) p
        Ôºù‚ü® ap (Œª l ‚Üí execution-from-state (((INIT-STATE xs) concat l) concat œÑ) p) ((concat-zeros i-max r) ‚Åª¬π) ‚ü© 
    execution-from-state (((INIT-STATE xs) concat (n-zeros-list i-max) concat (n-zeros-list r)) concat œÑ) p
        Ôºù‚ü® ap (Œª l ‚Üí execution-from-state (l concat œÑ) p) (concat-associative (INIT-STATE xs) (n-zeros-list i-max) (n-zeros-list r)) ‚ü© 
    execution-from-state ((œÉ‚ÇÇ concat (n-zeros-list r)) concat œÑ) p
        Ôºù‚ü® ap (Œª l ‚Üí execution-from-state l p) ((concat-associative œÉ‚ÇÇ (n-zeros-list r) œÑ) ‚Åª¬π) ‚ü© 
    execution-from-state (œÉ‚ÇÇ concat œÑ‚ÇÇ) p
        Ôºù‚ü® execution-of-LOOP-computable-cleanly-with-aux-variables {n} {f} {c} xs œÑ‚ÇÇ ‚ü© 
    ((f xs :: INIT-STATE' xs) concat (n-zeros-list i-max)) concat œÑ‚ÇÇ
        Ôºù‚ü® (concat-associative (f xs :: INIT-STATE' xs) (n-zeros-list i-max) œÑ‚ÇÇ) ‚Åª¬π ‚ü© 
    (f xs :: INIT-STATE' xs) concat (n-zeros-list i-max) concat œÑ‚ÇÇ
        Ôºù‚ü® ap ((f xs :: INIT-STATE' xs) concat_) (concat-associative (n-zeros-list i-max) (n-zeros-list r) œÑ) ‚ü© 
    (f xs :: INIT-STATE' xs) concat ((n-zeros-list i-max) concat (n-zeros-list r)) concat œÑ
        Ôºù‚ü® ap (Œª l ‚Üí (f xs :: INIT-STATE' xs) concat l concat œÑ) (concat-zeros i-max r) ‚ü© 
    (f xs :: INIT-STATE' xs) concat (n-zeros-list (i-max + r)) concat œÑ
        Ôºù‚ü® ap (Œª t ‚Üí (f xs :: INIT-STATE' xs) concat (n-zeros-list t) concat œÑ) q ‚ü© 
    (f xs :: INIT-STATE' xs) concat (n-zeros-list k) concat œÑ
        Ôºù‚ü® concat-associative (f xs :: INIT-STATE' xs) (n-zeros-list k) œÑ ‚ü© 
    (f xs :: INIT-STATE' xs concat n-zeros-list k) concat œÑ
     ‚àé where
    œÉ‚ÇÅ = (INIT-STATE xs) concat (n-zeros-list k)
    p = pr‚ÇÅ c

    i-max = (largest-index (pr‚ÇÅ c)) ‚à∏ n
    r,q = ‚â§-gets-diff i-max k k‚â§max 
    r = pr‚ÇÅ r,q

    œÉ‚ÇÇ = (INIT-STATE xs) concat (n-zeros-list i-max)
    œÑ‚ÇÇ = (n-zeros-list r) concat œÑ

    q : i-max + r Ôºù k 
    q = (Peano.+-conmutative i-max r) ‚àô pr‚ÇÇ r,q

-- Ejecutar programas concatenados concatena las ejecuciones.
program-concat-is-execution-composition : (p q : LOOP-program) ‚Üí (œÉ : STATE)
    ‚Üí execution-from-state œÉ (p concat q) Ôºù execution-from-state (execution-from-state œÉ p) q
program-concat-is-execution-composition []                    q œÉ = refl _
program-concat-is-execution-composition (CLEAR x :: p)        q œÉ = program-concat-is-execution-composition p q (clear-value œÉ x)
program-concat-is-execution-composition (INC x :: p)          q œÉ = program-concat-is-execution-composition p q (inc-value œÉ x)
program-concat-is-execution-composition ((LOOP x DO p') :: p) q œÉ = program-concat-is-execution-composition p q (loop-n-times (value-at œÉ x) œÉ p')

-- El mayor √≠ndice de dos programas concatenados es el m√°ximo de cada programa
largest-index-of-concat-is-max : (p p' : LOOP-program)
    ‚Üí largest-index (p concat p') Ôºù max (largest-index p) (largest-index p')
largest-index-of-concat-is-max [] p' = refl (largest-index p')
largest-index-of-concat-is-max (CLEAR (X x) :: p) p' = 
    max x (largest-index (p concat p'))
        Ôºù‚ü® ap (max x) (largest-index-of-concat-is-max p p') ‚ü© 
    max x (max (largest-index p) (largest-index p'))
        Ôºù‚ü® (max-assoc x (largest-index p) (largest-index p')) ‚Åª¬π ‚ü© 
    max (max x (largest-index p)) (largest-index p')
    ‚àé
largest-index-of-concat-is-max (INC (X x) :: p) p' = 
    max x (largest-index (p concat p'))
        Ôºù‚ü® ap (max x) (largest-index-of-concat-is-max p p') ‚ü© 
    max x (max (largest-index p) (largest-index p'))
        Ôºù‚ü® (max-assoc x (largest-index p) (largest-index p')) ‚Åª¬π ‚ü© 
    max (max x (largest-index p)) (largest-index p')
    ‚àé
largest-index-of-concat-is-max ((LOOP X x DO q) :: p) p' = 
    max x (max (largest-index q) (largest-index (p concat p')))
        Ôºù‚ü® ap (Œª t ‚Üí max x (max (largest-index q) t)) (largest-index-of-concat-is-max p p') ‚ü© 
    max x (max (largest-index q) (max (largest-index p) (largest-index p')))
        Ôºù‚ü® ap (max x) ((max-assoc (largest-index q) (largest-index p) (largest-index p')) ‚Åª¬π) ‚ü© 
    max x (max (max (largest-index q) (largest-index p)) (largest-index p'))
        Ôºù‚ü® (max-assoc x (max (largest-index q) (largest-index p)) (largest-index p')) ‚Åª¬π ‚ü© 
    max (max x (max (largest-index q) (largest-index p))) (largest-index p')
    ‚àé

LOOP-computable-cleanly-closed-under-composition : {n k : ‚Ñï} ‚Üí {h : ‚Ñï^ k ‚Üí ‚Ñï} 
            ‚Üí (h-clean : LOOP-computable-cleanly h)
            ‚Üí (gs-clean : Vect (Œ£ g Íûâ (‚Ñï^ n ‚Üí ‚Ñï) , LOOP-computable-cleanly g) k) 
            ‚Üí LOOP-computable-cleanly (PR-comp h (map gs-clean pr‚ÇÅ))
LOOP-computable-cleanly-closed-under-composition {n} {k} {h} (p_h , h-clean) gs-clean = {!   !} where

    -- El programa que calcula la composici√≥n usa variables auxiliares. Para
    -- elegir qu√© variables usar, empezamos en un √≠ndice lo suficientemente
    -- grande para que as√≠ no solape con los √≠ndices de las variables de los
    -- programas para h y gs.
    i‚ÇÄ : ‚Ñï 
    i‚ÇÄ = max (largest-index p_h) {!   !}

    -- Las variables a usar ser√°n:
    --   y‚±º = i‚ÇÄ + j,       con j desde 1 hasta k.
    --   z‚±º = i‚ÇÄ + k + j,   con j desde 1 hasta n.
    
    y‚±º z‚±º : (j : ‚Ñï) ‚Üí VAR

    y‚±º j = X (i‚ÇÄ + j)
    z‚±º j = X (i‚ÇÄ + k + j)

    -- Paso 1. Calcular y‚±º = g‚±º (x‚ÇÅ, ..., x‚Çô) 
    -- Paso 1.1. Calcular g‚±º (x‚ÇÅ, ..., x‚Çô) 
    -- Paso 1.2. Almacenar el resultado en y‚±º 
    -- Paso 1.3. Borrar la variable X‚ÇÄ 
    calculate-g-j : (n k : ‚Ñï) ‚Üí (gs-clean : Vect (Œ£ g Íûâ (‚Ñï^ n ‚Üí ‚Ñï) , LOOP-computable-cleanly g) k) 
        ‚Üí LOOP-program
    calculate-g-j n  0        nil                      = END
    calculate-g-j n (succ k) (g , g-clean ++ gs-clean) = 
            calculate-g-j n k gs-clean 
        concat 
            pr‚ÇÅ g-clean 
        concat 
            LOOP X‚ÇÄ DO (
                INC (y‚±º (succ k))   ::
            END)                    :: 
            CLEAR X‚ÇÄ                :: 
            END
    
    p-1 = calculate-g-j n k gs-clean

    -- Paso 2. Calcular h(y‚ÇÅ, ..., y‚Çñ) 
    -- Paso 2.1. Mover X j a z‚±º, con j = 1, ..., n
    -- Paso 2.2. Poner y‚±º en X j, con j = 1, ..., k
    -- Paso 2.3. Calcular h 

    move-x-j : (n k : ‚Ñï) ‚Üí LOOP-program
    move-x-j  0       k = END
    move-x-j (succ n) k = move-x-j n k concat 
        LOOP X (succ n) DO (
            INC (z‚±º (succ n))       ::
        END)                        ::
        CLEAR (X (succ n))          ::
        END 

    copy-y-j : (n k : ‚Ñï) ‚Üí LOOP-program
    copy-y-j n        0 = END
    copy-y-j n (succ k) = copy-y-j n k concat 
        LOOP (y‚±º (succ n)) DO (
            INC (X (succ n))       ::
        END)                       :: 
        END

    p-2-1 = move-x-j n k 
    p-2-2 = copy-y-j n k 
    p-2-3 = p_h

    p-2 = p-2-1 concat p-2-2 concat p-2-3

    -- Paso 3. Limpiar el programa
    -- Paso 3.1. Borrar X j, con j = 1, ..., k
    -- Paso 3.2. Restaurar z‚±º en X j
    -- Paso 3.3. Borrar los y‚±º y los z‚±º 
    -- Paso 3.3. Borrar loz z‚±º

    remove-x-j : (n k : ‚Ñï) ‚Üí LOOP-program
    remove-x-j n 0        = END
    remove-x-j n (succ k) = remove-x-j n k concat CLEAR (X (succ k)) :: END

    copy-z-j : (n k : ‚Ñï) ‚Üí LOOP-program
    copy-z-j  0       k = END
    copy-z-j (succ n) k = copy-z-j n k concat 
        LOOP (z‚±º (succ n)) DO (
            INC (X (succ n))       ::
        END)                       :: 
        END

    remove-y-j : (n k : ‚Ñï) ‚Üí LOOP-program 
    remove-y-j n 0        = END
    remove-y-j n (succ k) = remove-y-j n k concat 
        CLEAR (y‚±º (succ k)) :: END

    remove-z-j : (n k : ‚Ñï) ‚Üí LOOP-program
    remove-z-j  0       k = END
    remove-z-j (succ n) k = remove-z-j n k concat 
        CLEAR (z‚±º (succ n)) :: END
    
    p-3-1 = remove-x-j n k 
    p-3-2 = copy-z-j   n k
    p-3-3 = remove-y-j n k 
    p-3-4 = remove-z-j n k

    p-3 = p-3-1 concat p-3-2 concat p-3-3 concat p-3-4

    -- El programa es la sucesi√≥n de las partes
    p : LOOP-program
    p = p-1 concat p-2 concat p-3

    -- El √≠ndice m√°s grande de p es i‚ÇÄ + n + k 

    -- largest-of-p : largest-index p = i‚ÇÄ + n + k 
    -- largest-of-p = ?

    -- Seguimiento de la ejecuci√≥n del programa.
    -- final-state : (xs : ‚Ñï^ n) ‚Üí 



{-

LOOP-computable-clean-closed-under-composition : {n k : ‚Ñï} ‚Üí {h : ‚Ñï^ k ‚Üí ‚Ñï} 
            ‚Üí (h-comp : LOOP-computable-clean h)
            ‚Üí (gs-comp : Vect (Œ£ g Íûâ (‚Ñï^ n ‚Üí ‚Ñï) , LOOP-computable-clean g) k) 
            ‚Üí LOOP-computable-clean (PR-comp h (map gs-comp pr‚ÇÅ))
LOOP-computable-clean-closed-under-composition {n} {k} {h} h-comp gs-comp = {!   !} , ({!   !} , {!   !}) where

    -- Programa que calcula la composici√≥n

    -- Paso 1. Guardar los valores iniciales de entrada
    -- El programa p-shift parte de un estado x‚ÇÄ :: œÉ y lo convierte en un estado 
    -- (x‚ÇÄ :: œÉ) concat œÉ
    p-shift-r-j : (r j : ‚Ñï) ‚Üí (x‚ÇÄ : ‚Ñï) ‚Üí (œÉ : STATE) ‚Üí LOOP-program 
    p-shift-r-j r j x‚ÇÄ [] = empty-program
    p-shift-r-j r j x‚ÇÄ (x‚ÇÅ :: œÉ) = (
        CLEAR (X (r + j))   :: 
        LOOP (X j) DO (
            INC (X (r + j)) :: 
        END)                :: 
        END) 
        concat p-shift-r-j r (j + 1) x‚ÇÄ œÉ 

    p-shift : (x‚ÇÄ : ‚Ñï) ‚Üí (œÉ : STATE) ‚Üí LOOP-program 
    p-shift x‚ÇÄ œÉ = p-shift-r-j (len (x‚ÇÄ :: œÉ)) 1 x‚ÇÄ œÉ

    lemma-1-p-shift : (œÉ : STATE) ‚Üí clear-value œÉ (X (len œÉ + 1)) Ôºù œÉ 
    lemma-1-p-shift [] = refl []
    lemma-1-p-shift (x :: œÉ) = ap (x ::_) (lemma-1-p-shift œÉ)

    lemma-2-p-shift : (œÉ : STATE) ‚Üí (x : ‚Ñï) 
        ‚Üí loop-n-times x œÉ (INC (X (len œÉ + 1)) :: END) Ôºù œÉ concat x :: []
    lemma-2-p-shift [] x = {!   !}
    lemma-2-p-shift (x‚ÇÅ :: œÉ) x = {!   !}

    lemma-p-shift : (x‚ÇÄ : ‚Ñï) ‚Üí (œÉ : STATE) 
        ‚Üí execution-from-state (x‚ÇÄ :: œÉ) (p-shift x‚ÇÄ œÉ) Ôºù x‚ÇÄ :: œÉ concat œÉ
    lemma-p-shift x‚ÇÄ [] = refl _
    lemma-p-shift x‚ÇÄ (x‚ÇÅ :: œÉ) = {! 
        execution-from-state (x‚ÇÄ :: x‚ÇÅ :: œÉ) (p-shift x‚ÇÄ (x‚ÇÅ :: œÉ))
        
            Ôºù‚ü® refl _ ‚ü© 

        execution-from-state
            (loop-n-times x‚ÇÅ (x‚ÇÄ :: x‚ÇÅ :: clear-value œÉ (X (n_œÉ + 1)))
                (INC (X (n_œÉ + 3)) :: END))
            (p-shift-r-j (n_œÉ + 2) 2 x‚ÇÄ œÉ)

            Ôºù‚ü® ap (Œª œÑ ‚Üí execution-from-state
                (loop-n-times x‚ÇÅ (x‚ÇÄ :: x‚ÇÅ :: œÑ)
                    (INC (X (n_œÉ + 3)) :: END))
                (p-shift-r-j (n_œÉ + 2) 2 x‚ÇÄ œÉ)) (lemma-1-p-shift œÉ) ‚ü© 

        execution-from-state
            (loop-n-times x‚ÇÅ (x‚ÇÄ :: x‚ÇÅ :: œÉ) (INC (X (n_œÉ + 3)) :: END))
            (p-shift-r-j (n_œÉ + 2) 2 x‚ÇÄ œÉ)

            Ôºù‚ü® ap (Œª t ‚Üí execution-from-state t (p-shift-r-j (n_œÉ + 2) 2 x‚ÇÄ œÉ)) 
                (lemma-2-p-shift (x‚ÇÄ :: x‚ÇÅ :: œÉ) x‚ÇÅ)    ‚ü© 
        
        execution-from-state (x‚ÇÄ :: x‚ÇÅ :: œÉ concat x‚ÇÅ :: []) (p-shift-r-j (n_œÉ + 2) 2 x‚ÇÄ œÉ)

        ‚àé
      !} where
        n_œÉ = len œÉ

    p : LOOP-program
    p = {!  !}





-- 4.4. LOOP-computable es cerrado por recursi√≥n

LOOP-computable-clean-closed-under-recursion : {n : ‚Ñï} ‚Üí {g : ‚Ñï^ n ‚Üí ‚Ñï} ‚Üí {h : (‚Ñï^ (n + 2)) ‚Üí ‚Ñï}
            ‚Üí (g-comp : LOOP-computable-clean g) ‚Üí (h-comp : LOOP-computable-clean h) 
            ‚Üí LOOP-computable-clean (œÅ-operator g h)
LOOP-computable-clean-closed-under-recursion  {n} {g} {h} g-comp h-comp = {!   !}

-- 4.5. Teorema: toda funci√≥n primitiva recursiva es LOOP-computable
ùìüùì°-is-LOOP-computable : {n : ‚Ñï} ‚Üí (f : ‚Ñï^ n ‚Üí ‚Ñï)
    ‚Üí ùìüùì° f ‚Üí LOOP-computable f 
ùìüùì°-is-LOOP-computable f f-pr = LOOP-computable-clean-is-LOOP-computable (
    ùìüùì°-induction 
        succ-is-LOOP-computable-clean 
        zero-fun-n-is-LOOP-computable-clean 
        œÄ-n-k-is-LOOP-computable-clean 
        LOOP-computable-clean-closed-under-composition 
        LOOP-computable-clean-closed-under-recursion 
        _ f f-pr)


-- 4.6. Teorema: toda funci√≥n meramente primitiva recursiva es meramente
-- LOOP-computable
ùìüùì°-prop-is-LOOP-computable-prop : {n : ‚Ñï} ‚Üí {f : ‚Ñï^ n ‚Üí ‚Ñï}
    ‚Üí ùìüùì°-prop f ‚Üí LOOP-computable-prop f 
ùìüùì°-prop-is-LOOP-computable-prop = ‚à•‚à•-recursion ‚à•‚à•-is-subsingleton (Œª f-pr ‚Üí ‚à£ ùìüùì°-is-LOOP-computable _ f-pr ‚à£)
-}
-- 
-- 5. Las funciones LOOP-computables son primitivas recursivas
--

--
-- 6. El tipo de las funciones que son meramente primitivas recursivas y el tipo 
-- de las funciones que son LOOP-computables coincide
--

